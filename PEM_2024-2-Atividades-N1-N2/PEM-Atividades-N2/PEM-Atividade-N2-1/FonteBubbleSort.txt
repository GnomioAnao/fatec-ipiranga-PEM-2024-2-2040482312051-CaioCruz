#include <stdio.h>

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                // Troca os elementos
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void printArray(int arr[], int size) {
    int i;
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {5, 3, 8, 4, 2};
    int n = sizeof(arr)/sizeof(arr[0]);
    printf("Array original: \n");
    printArray(arr, n);
    bubbleSort(arr, n);
    printf("Array ordenado: \n");
    printArray(arr, n);
    return 0;
}

O código apresentado pode ser melhorado em vários aspectos. Primeiramente, a função de ordenação bubbleSort pode ser otimizada para parar a execução caso o array já esteja ordenado, economizando tempo de processamento. Também é possível tornar a função printArray mais segura, utilizando const para evitar modificações no array. Criação de uma função swap para troca de elementos modularizaria melhor o código. Por fim, adicionar verificações de tamanho no array e permitir entrada dinâmica de dados aumentaria a flexibilidade do programa.
